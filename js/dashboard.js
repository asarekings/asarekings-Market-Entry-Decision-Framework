// Aurora Dashboard Functions
// Created by: asarekings

function filterDataByRegion(data) {
    if (currentRegion === 'all') return data;
    return data.filter(market => AURORA_CONFIG.regions[currentRegion]?.includes(market.name));
}

function updateCurrentTime() {
    const now = new Date();
    const utcString = now.toISOString().slice(0, 19).replace('T', ' ') + ' UTC';
    const element = document.getElementById('currentDateTime');
    if (element) {
        element.textContent = utcString;
    }
    
    const timeOnly = now.toISOString().slice(11, 16);
    const lastUpdated = document.getElementById('lastUpdated');
    if (lastUpdated) {
        lastUpdated.textContent = timeOnly;
    }
}

function updateMetrics() {
    const data = filterDataByRegion(MARKET_DATA[currentIndustry]);
    
    animateValue('totalMarkets', 0, data.length, 1000);
    animateValue('avgScore', 0, (data.reduce((sum, m) => sum + m.score, 0) / data.length), 1200, 1);
    animateValue('highPotential', 0, data.filter(m => m.score >= 8.0).length, 1400);
    animateValue('projectedRoi', 0, Math.max(...data.map(m => m.roi)), 1600, 0, '%');
    animateValue('riskScore', 0, (data.reduce((sum, m) => sum + m.risk, 0) / data.length), 1800, 1);
}

function animateValue(elementId, start, end, duration, decimals = 0, suffix = '') {
    const element = document.getElementById(elementId);
    if (!element) return;
    
    const range = end - start;
    const startTime = performance.now();
    
    function updateValue(currentTime) {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);
        const current = start + (range * progress);
        
        element.textContent = current.toFixed(decimals) + suffix;
        
        if (progress < 1) {
            requestAnimationFrame(updateValue);
        }
    }
    
    requestAnimationFrame(updateValue);
}

function updateTable() {
    const tableBody = document.getElementById('tableBody');
    if (!tableBody) return;
    
    const data = filterDataByRegion(MARKET_DATA[currentIndustry]).slice(0, 5);
    
    tableBody.innerHTML = data.map((market, index) => `
        <tr>
            <td><strong style="color: ${AURORA_CONFIG.colors.primary[index % AURORA_CONFIG.colors.primary.length]};">${market.name}</strong></td>
            <td>
                <div class="score-bar">
                    <div class="score-fill" style="width: ${market.score * 10}%;"></div>
                </div>
                <small><strong>${market.score}/10</strong></small>
            </td>
            <td><strong>$${market.size}B</strong></td>
            <td><strong style="color: #40407a">${market.roi}%</strong></td>
            <td><span style="color: ${market.risk < 5 ? '#26de81' : market.risk < 7 ? '#fed330' : '#ff3838'}">${market.risk}/10</span></td>
        </tr>
    `).join('');
}

function updateDashboard() {
    console.log(`üîÑ Updating Aurora dashboard for ${currentIndustry} in ${currentRegion} by asarekings`);
    
    showNotification('üîÑ Updating Aurora analytics...', 'info');
    
    setTimeout(() => {
        updateMetrics();
        updateTable();
        updateCharts();
        updateCurrentTime();
        showNotification('‚úÖ Aurora analytics updated successfully!', 'success');
    }, 500);
}

function showNotification(message, type) {
    const existingNotifications = document.querySelectorAll('.notification');
    existingNotifications.forEach(notification => {
        if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
        }
    });
    
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.innerHTML = `
        <div style="display: flex; align-items: center; gap: 10px;">
            <span>${type === 'success' ? '‚úÖ' : type === 'info' ? 'üìä' : '‚ö†Ô∏è'}</span>
            <span>${message}</span>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => notification.classList.add('show'), 100);
    
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
            if (notification.parentNode) {
                document.body.removeChild(notification);
            }
        }, 300);
    }, 3000);
}

// Button Functions
function generateAdvancedReport() {
    console.log('üéØ Generating Aurora Report by asarekings...');
    
    const data = filterDataByRegion(MARKET_DATA[currentIndustry]);
    const topMarket = data.reduce((prev, current) => (prev.score > current.score) ? prev : current);
    
    const reportContent = `# üåü Aurora Market Analysis Report
## ${currentIndustry.charAt(0).toUpperCase() + currentIndustry.slice(1)} Industry Analysis

**Generated by:** ${AURORA_CONFIG.author}  
**Date:** ${AURORA_CONFIG.lastUpdated}  
**Region:** ${currentRegion === 'all' ? 'Global' : currentRegion.replace('-', ' ').toUpperCase()}

## üöÄ Executive Summary
**Top Market:** ${topMarket.name} (Score: ${topMarket.score}/10, ROI: ${topMarket.roi}%)

## üìä Key Findings
- **Markets Analyzed:** ${data.length}
- **Average Score:** ${(data.reduce((sum, m) => sum + m.score, 0) / data.length).toFixed(1)}/10
- **High Potential Markets:** ${data.filter(m => m.score >= 8.0).length}
- **Best ROI:** ${Math.max(...data.map(m => m.roi))}%

---
*Generated by Aurora AI Dashboard | Created by ${AURORA_CONFIG.author}*`;
    
    const blob = new Blob([reportContent], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `aurora-report-${currentIndustry}-${Date.now()}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    showNotification('üéØ Aurora Report generated successfully!', 'success');
}

function exportAdvancedData() {
    console.log('üíæ Exporting Aurora Data by asarekings...');
    
    const data = filterDataByRegion(MARKET_DATA[currentIndustry]);
    const csvContent = [
        ['Market', 'Score', 'Size', 'ROI', 'Risk', 'Timeline'],
        ...data.map(m => [m.name, m.score, m.size, m.roi, m.risk, m.timeline])
    ].map(row => row.join(',')).join('\n');
    
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `aurora-data-${currentIndustry}-${Date.now()}.csv`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    showNotification('üíæ Aurora data exported successfully!', 'success');
}

function runSimulation() {
    console.log('üéØ Running Aurora Simulation by asarekings...');
    
    showNotification('üéØ Running Aurora simulation...', 'info');
    
    setTimeout(() => {
        const data = filterDataByRegion(MARKET_DATA[currentIndustry]);
        const topMarket = data.reduce((prev, current) => (prev.score > current.score) ? prev : current);
        const success = Math.round(Math.random() * 15 + 85);
        
        alert(`üéØ Aurora Simulation Complete!

üìä Analysis Results:
‚Ä¢ Top Market: ${topMarket.name}
‚Ä¢ Success Probability: ${success}%
‚Ä¢ Generated by: ${AURORA_CONFIG.author}
‚Ä¢ Framework: Aurora v${AURORA_CONFIG.version}`);
        
        showNotification('‚úÖ Aurora simulation completed!', 'success');
    }, 2000);
}

// Make functions globally available
window.generateAdvancedReport = generateAdvancedReport;
window.exportAdvancedData = exportAdvancedData;
window.runSimulation = runSimulation;